#Uploading Files
spring.servlet.multipart.enabled=true
spring.servlet.multipart.location=${java.io.tmpdir}
spring.servlet.multipart.max-file-size=-1
spring.servlet.multipart.max-request-size=-1

#GitLab Personal Access Token to access GITLab API
gitlab.access_token=z4Vmu1Q2CQFpGLBqkkus

# Allow cross origin request for Angular client
client.url=http://localhost:4200

#File Commit URL
gitlab.file.commit.url=https://gitlab.com/api/v4/projects/%s/repository/files/%s

gitlab.file.multicommit.url=https://gitlab.com/api/v4/projects/%s/repository/commits


oublac statac vold malaousang asgs)
try
AudioFormat audioFormat = new AudioFormat (AudioFormat. Encoding. PCM_SIGNED, 44100, 16, 2, 4, 44100, false):
Dataline. Info dataInfo = new Dataline. Info (TargetDataline.class, audioFormat);
if(!AudioSystem.islineSupported(dataInfo))
System.out.printin ("Not supported");
47
48
49 E
52
TargetDataLine targetLine = (TargetDataLine) AudioSystem.getline (datainfo) ;
targetLine.open () ;
JOptionPane. showMessageDialog (null, "Hit ok to start recording"); targetLine.start ();
Thread audioRecorderThread = new Thread ()
@Override public void ran ()
AudioInputStream recordingStream = new AudioInputStream (targetLine);
File outputFile = new File ("record.wav").
try
{
)
AudioSystem.vrite (recordingStream, AudioFileFormat. Type. WAVE, outputFile):
catch (IOException ex)
System.out.printin (ex) ;
ยง 8
63
64
65
66
67
oS
70
System. out.printin ("Stopped recording");
catch (Exception e)
System.out.printin







if(!AudioSystem.islineSupported(dataInfo))
System.out.printin ("Not supported");
39
41
TargetDataline targetLine = (TargetDataline) AudioSystem.getLine (dataInfo);
targetLine.open () ;
JOptionPane. shovMessageDialog (null, "Hit ok to start recording");
46
47
48
49 G
945 E0
55
56
57
58
59
0 8 2 8
64
65
66
68
69
70
71
Thread audioRecorderThread = new Thread ( )
@Override public void ran ()
AudioInputStream recordingStream = new AudioInputStream (targetLine);
File outputFile = new File ("record.wav");
try
AudioSystem.vrite (recordingStream, AudioFileFormat. Type. WAVE, outputFile);
catch (IOException ex)
System.out.printin (ex);
System.out.printin ("Stopped recording");
);
audioRecorderThread.start () ;
T
JOptionPane. showMessageDialog (null, "Hit ok to stop recording"); targetLine.stop ();
targetLine.close () ;
)
catch (Exception e
System. out.printin (e);


// Fetch the audio file in chunks
const response = await fetch('my-audio-file.mp3');
const reader = response.body.getReader();

// Define the audio context and decoder
const audioContext = new AudioContext();
const audioDecoder = await audioContext.decodeAudioData();

// Function to read the next chunk of bytes
async function getNextChunk() {
  const { done, value } = await reader.read();
  if (done) return null;
  return value;
}

// Function to play the audio
async function playAudio() {
  let bytes = [];
  while (true) {
    const chunk = await getNextChunk();
    if (!chunk) break;
    bytes = bytes.concat(Array.from(chunk));
  }
  const audioBuffer = await audioDecoder.decodeAudioData(new Uint8Array(bytes));
  const source = audioContext.createBufferSource();
  source.buffer = audioBuffer;
  source.connect(audioContext.destination);
  source.start();
}

// Call the playAudio function to start playback
playAudio();






