
import java.io.*;
import java.util.concurrent.*;

public class CopyJob {
    private final ByteArrayOutputStream sourceStream;
    private final ByteArrayOutputStream targetStream;
    private final BlockingQueue<byte[]> queue;

    public CopyJob() {
        sourceStream = new ByteArrayOutputStream();
        targetStream = new ByteArrayOutputStream();
        queue = new LinkedBlockingQueue<>();
    }

    public void writeToSource(byte[] data) {
        try {
            sourceStream.write(data);
            queue.put(data); // Put data into the queue
        } catch (IOException | InterruptedException e) {
            e.printStackTrace();
        }
    }

    public void startCopying() {
        Thread copyThread = new Thread(() -> {
            try {
                while (true) {
                    byte[] data = queue.take(); // Wait for data if queue is empty
                    synchronized (targetStream) {
                        targetStream.write(data);
                    }
                }
            } catch (InterruptedException | IOException e) {
                e.printStackTrace();
            }
        });
        copyThread.start();
    }

    // Other methods for file writing, etc.
}
import java.io.ByteArrayOutputStream;
import java.util.concurrent.Semaphore;

public class ByteArrayCopy {
    private ByteArrayOutputStream outputStream1;
    private ByteArrayOutputStream outputStream2;
    private Semaphore semaphore;

    public ByteArrayCopy() {
        outputStream1 = new ByteArrayOutputStream();
        outputStream2 = new ByteArrayOutputStream();
        semaphore = new Semaphore(1); // Initialize semaphore with 1 permit (one thread can access at a time)
    }

    public void writeToOutputStream1(byte[] data) throws InterruptedException {
        semaphore.acquire(); // Acquire the semaphore permit
        outputStream1.write(data);
        semaphore.release(); // Release the semaphore permit
    }

    public void copyToOutputStream2IfAvailable() throws InterruptedException {
        if (semaphore.tryAcquire()) { // Try to acquire the semaphore permit without waiting
            outputStream1.writeTo(outputStream2); // Copy data from outputStream1 to outputStream2
            semaphore.release(); // Release the semaphore permit
        }
    }
}





rootProject.name = 'fedxapi'
